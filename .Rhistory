rm
cat("\014")
x <- list("hi",c(10:20),1)
x[2]
x[[2]]
iris[2,]
typeof(iris[2,])
p = iris[2,]
p$Sepal.Length
p$Sepal.Length
x = seq(from = 1, to = 21, by =4)
x
lst <- list('first' = iris, 'second'=1:3)
lst[2]
lst
x=1:3
y=4:5
x+y
mat <- matrix(1:9, ncol = 3)
mat
mat[3,]
help(hist)
x<-seq(from=1,to=21,by=4)
x
lst <- list('first' = iris, 'second'=1:3)
lst$second
1:3
4:5
x<-1:3
y<-4:5
x+y
x<-1:3
x
y<-4:5
x+y
help(rexp)
rexp(30,rate =2)
expValues <- rexp(30,rate =2)
#Questio 2
hist(expValues)
################################################;
rm(list = ls())
rm
cat("\014")
help(hist)
expValues <- rexp(30,rate =2)
#Questio 2
hist(expValues,main = paste("Histogram of Random Exponential Values"))
numSeq <- seq(from=10,to=100,by=0.5);
numSeq <- seq(from=10,to=100,by=0.5)
help(sample)
#Question 4
sample(numSeq, 30, replace = TRUE)
randomValues = sample(numSeq, 30, replace = TRUE)
numSeq[1]
numSeq[1,2]
numSeq[1;2]
numSeq(1)
numSeq[1:20]
numSeq[1:20:3]
numSeq[10]
numSeq[c(1,10)]
help(count)
help(size)
size
help(matrix)
ncol
help(ncol)
ncol(numSeq)
nrow(numSeq)
numSeq(-c(1,2,seq(from=150,to=181)))
numSeq(c(1,1))
numSeq(c(1,2))
numSeq[-c(1,2,seq(from=150,to=181))]
numMat = matrix(c(expValues,randomValues),ncol = 2)
numMat
help(list)
list(Null, myNames =c("exp","random"))
list(dimnames(null), myNames =c("exp","random"))
list(dimnames(), myNames =c("exp","random"))
list(, myNames =c("exp","random"))
list( myNames =c("exp","random"))
list( myNames =c("exp","random"),2)
expValues <- rexp(30,rate =2)
expValues
hist(expValues,main = paste("Histogram of Random Exponential Values"))
hist(expValues,main = paste("Histogram of Random Exponential Values"))
#Question 3
numSeq <- seq(from=10,to=100,by=0.5)
#Question 4
randomValues = sample(numSeq, 30, replace = TRUE)
#Question 3
numSeq <- seq(from=10,to=100,by=0.5)
numSeq
randomValues = sample(numSeq, 30, replace = TRUE)
randomValues
numSeq[c(1,10,15,30)]
length(numSeq)#?????????????????
lenSeq <- length(numSeq)#?????????????????
lenSeq
numMat = matrix(c(expValues,randomValues),ncol = 2);
numMat = matrix(c(expValues,randomValues),ncol = 2);
numMat = matrix(c(expValues,randomValues),ncol = 2);
help(sample)
numSeq[-c(1,2,seq(from=150,to=lenSeq))]
help(dimmames)
help(dimnames)
dimnames(numMat)
#Question5
numSeq[c(1,10,15,30)]
lenSeq <- length(numSeq)#?????????????????
lenSeq #Prints
length(x)
length(numMat)
lenSeq <- length(numSeq)#?????????????????
lenSeq #Prints
numSeq[-c(1,2,seq(from=150,to=lenSeq))]
help(matrix)
numMat = matrix(c(expValues,randomValues),ncol = 2)
numMat
numMat = matrix(c(expValues,randomValues),nrow = 30)
numMat
dimnames = list(NULL, c("First", "Second"))
#Question 10
numMat = matrix(c(expValues,randomValues),ncol = 2,dimnames = list(NULL, c("First", "Second")))
numMat
myNames = list(NULL, c("Exp", "Random")) #created names
myNames
numMat = matrix(c(expValues,randomValues),ncol = 2,dimnames = myNames)
numMat
#Question 9
myNames = list("NULL", c("Exp", "Random")) #created names
numMat = matrix(c(expValues,randomValues),ncol = 2,dimnames = myNames)
numMat
sample(letters, 30, replace = TRUE)
lettterVec <- sample(letters, 30, replace = TRUE)
cbind(numMat,lettterVec)
cbind(numMat,sample(letters, 30, replace = TRUE))
typeof(cbind(numMat,lettterVec))
cbind(numMat,lettterVec)[3,4]
binded =cbind(numMat,lettterVec)
binded[3,2]
binded[1,2]
typeof(binded[1,2])
myDF = data.frame(Exponential = expValues,Random =randomValues,myLetters = binded)
myDF
myDF = data.frame(Exponential = expValues,Random =randomValues,myLetters = lettterVec)
myDF
myDF$Random
myDF[,2]
MiddleRows = myDF[10:20,]
MiddleRows
help(names)
names(myDF)
typeof(names(myDF))
return(names(myDf))
return(names(myDF))
myDF <- myDF[,,NULL]
myDF[,3]
myDF[,-c(3)]
fit <- lm(cars$speed ~ cars$dist)
fit
typeof(fit)
length(fit)
fit[2]
fit[3]
fit
fit[1:12]
fit[[1]]
fit[[2]]
fit[[1]]
help(data.frame)
help(names)
names(myDF)
names(myDF)[2]
names(myDF)[2]<-"myValues"
myDF
vec<-c(1,3,5,10)
vec
library(ggplot2)
tab <- table(diamonds$cut, diamonds$color)
typeof(iris[2,])
mat
mat = matrix(1:9,ncol=3)
mat
mat[3,2]
typeof[iris[2,]]
iris[2,1]
iris[2,]
typeof(iris[2,])
str(iris[2,])
iris[2,]
typeof(iris[2,])
rm(list = ls())
rm
cat("\014")
#Question 1
expValues <- rexp(30,rate =2)
#Question 2
hist(expValues,main = paste("Histogram of Random Exponential Values"))
#Question 3
numSeq <- seq(from=10,to=100,by=0.5)
#Question 4
randomValues = sample(numSeq, 30, replace = TRUE)
#Question5
numSeq[c(1,10,15,30)]
#Question 6
lenSeq <- length(numSeq)#?????????????????
lenSeq #Prints
#Question 7
numSeq[-c(1,2,seq(from=150,to=lenSeq))]
#Question 8
numMat = matrix(c(expValues,randomValues),ncol = 2)
numMat
#Question 9
myNames = list(NULL, c("Exp", "Random")) #created names
#Question 10
numMat = matrix(c(expValues,randomValues),ncol = 2,dimnames = myNames)
numMat
#Question 11
lettterVec <- sample(letters, 30, replace = TRUE)
binded =cbind(numMat,lettterVec) #binded the vector and matrix
binded #prints
#Question 12
typeof(binded[1,2])
# All of the values in the matrix that were numeric data became characters.
#Question 13
myDF = data.frame(Exponential = expValues,Random =randomValues,myLetters = lettterVec)
myDF
#Question 14
myDF$Random #one way
myDF[,2] #second way
#third way
#Question 15
MiddleRows = myDF[10:20,] #since it is b4 the comma we only fetch rows
MiddleRows #prints
#Question 16
names(myDF)
#outputs names of coloums in the data frame
#Question 17
names(myDF)[2]<-"myValues"  # gets the second name from the name vector & replaces it
myDF
#Question 19
fit <- lm(cars$speed ~ cars$dist)
typeof(fit)
length(fit)
# Based off the typeof, the fit model is a list object
# The length of this list is 12
#Question 20
fit[[1]]
lettterVec <- sample(letters, 30, replace = TRUE)
binded =cbind(numMat,lettterVec) #binded the vector and matrix
binded #prints
str(binded[1,2])
myDF = data.frame(Exponential = expValues,Random =randomValues,myLetters = lettterVec)
myDF
binded =cbind(numMat,lettterVec) #binded the vector and matrix
binded
myDF$Random #one way
myDF[,2] #second way
cbind(numMat,lettterVec) #binded the vector and matrix # & prints
myDF$Random #one way
myDF[,2]
cbind(numMat,sample(letters, 30, replace = TRUE))
myDF[2]
#Question 13
myDF <- data.frame(Exponential = expValues,Random =randomValues,myLetters = lettterVec)
myDF
help(data.frame)
myDF[[2]]
v1 <- myDF$Random  #one way
v2 <- myDF[,2]     #second way
v3 <- myDF[[2]]
v1 <- myDF$Random  #one way
v2 <- myDF[,2]     #second way
v3 <- myDF[[2]]
myDF[[2]]
myDF[,2]
myDF$Random
MiddleRows = myDF[10:20,] #since it is b4 the comma we only fetch rows
MiddleRows #prints
myDF[10:20,] #since it is b4 the comma we only fetch rows
#prints
myDF[,-c(1,3)]
myDF[,-c(1,3)]
myDF[,-c(1,3)]
myDF[,2]
myDF
myDF$Random
myDF <- data.frame(Exponential = expValues,Random =randomValues,myLetters = lettterVec)
myDF
names(myDF)
names(myDF)[2]<-"myValues"
names(myDF)[2]<-"myValues"  # gets the second name from the name vector & replaces it
myDF
myDF <- myDF[,-c(3)]
myDF
myDF[[2]]
myDF[10:20,]
myDF[10:20,]
help(names)
names(myDF)
names(myDF)[2]
names(myDF)[3]
names(myDF)[1]
fit <- lm(cars$speed ~ cars$dist)
typeof(fit)
length(fit)
str(fit)
fit[[1]]
fit[1]
myDF <- data.frame(Exponential = expValues,Random =randomValues,myLetters = lettterVec)
myDF
myDF[,3] <- NULL
myDF
myDF[,3] <- NULL # eliminates 3rd col. and puts it on myDF
myDF
fit[[1]]
fit <- lm(cars$speed ~ cars$dist)
fit
cof <- fit[[1]]
cof
str(cof)
typeof(fit)
str(fit)
fit[[1]]
typeof(fit[[1]])
typeof(fit[[1]])
str(fit[[1]])
fit[[fit$coefficients]]
fit$coefficients
typeof[fit$coefficients]
typeof(fit$coefficients)
str(fit$coefficients)
fit$coefficients
#Question 1
expValues <- rexp(30,rate =2)
#Question 2
hist(expValues,main = paste("Histogram of Random Exponential Values"))
#Question 3
numSeq <- seq(from=10,to=100,by=0.5)
#Question 4
randomValues = sample(numSeq, 30, replace = TRUE)
#Question5
numSeq[c(1,10,15,30)]
#Question 6
lenSeq <- length(numSeq)#?????????????????
lenSeq #Prints
#Question 7
numSeq[-c(1,2,seq(from=150,to=lenSeq))]
#Question 8
numMat = matrix(c(expValues,randomValues),ncol = 2)
numMat
#Question 9
myNames = list(NULL, c("Exp", "Random")) #created names
numMat <- matrix(c(expValues,randomValues),ncol = 2,dimnames = myNames)
numMat
rm(list = ls())
rm
cat("\014")
################################################;
#Author:    Nicholas Gawron                                                                              ;
#Collaborators:  Jamie Loring                                                         ;
#Program Purpose: HW 1 ;
#Date:  1/26/21                                                                                   ;
################################################;
rm(list = ls())
rm
cat("\014")
#clears consle and environment
#Question 1
expValues <- rexp(30,rate =2)
#Question 2
hist(expValues,main = paste("Histogram of Random Exponential Values"))
#Question 3
numSeq <- seq(from=10,to=100,by=0.5)
#Question 4
randomValues = sample(numSeq, 30, replace = TRUE)
#Question5
numSeq[c(1,10,15,30)]
#Question 6
lenSeq <- length(numSeq)#?????????????????
lenSeq #Prints
#Question 7
numSeq[-c(1,2,seq(from=150,to=lenSeq))]
#Question 8
numMat = matrix(c(expValues,randomValues),ncol = 2)
numMat
#Question 9
myNames = list(NULL, c("Exp", "Random")) #created names
#Question 10
numMat <- matrix(c(expValues,randomValues),ncol = 2,dimnames = myNames)
numMat
#Question 11
lettterVec <- sample(letters, 30, replace = TRUE)
binded <- cbind(numMat,sample(letters, 30, replace = TRUE)) #binded the vector and matrix
binded #prints THIS was stored as a matrix to make question 12 easier.
#Question 12
typeof(binded[1,2])
# All of the values in the matrix that were numeric data became characters. this is checked with typeof command
#Question 13
myDF <- data.frame(Exponential = expValues,Random =randomValues,myLetters = lettterVec)
myDF
#Question 14
myDF$Random  #one way
myDF[,2]     #second way
myDF[[2]]    #third way
#these three ways are all different and return the same col. of values
#Question 15
myDF[10:20,] #since it is b4 the comma we only fetch rows
#prints
#Question 16
names(myDF)
#outputs names of coloums in the data frame
#Question 17
names(myDF)[2]<-"myValues"  # gets the second name from the name vector & replaces it
myDF
#Question 18
myDF[,3] <- NULL # eliminates 3rd col. and puts it on myDF
myDF #prints to console
#Question 19
fit <- lm(cars$speed ~ cars$dist)
typeof(fit)
str(fit)
length(fit)
# Based off the typeof, the fit model is a list object
#also according to str, fit is a list of length 12
# str(fit)  >>>>>  List of 12
# The length of this list is 12
#Question 20
fit[[1]]
fit$coefficients #also does the same thing
#this returns the "double" valued atomic vector inside the first element of the list
#called fit. This vector has two values stored in it
# This is determined to be a set of double (not characters or a list) by the
#typeof command below
str(fit[[1]])
typeof(fit[[1]])
fit[[1]]
fit$coefficients #also does the same thing
getwd()
rm
rm(list = ls())
cat("\014")
Sc <- data.frame(Grades = c("Distinction(A)","Merit(B)","Pass(C)"","Fail(F)") , Number = c(5,8,9,2))
Grades<-Grades = c("Distinction(A)","Merit(B)","Pass(C)"","Fail(F)")
Grades<- c("Distinction(A)","Merit(B)","Pass(C)"","Fail(F)")
c("Distinction(A)","Merit(B)","Pass(C)"","Fail(F)")
c(1,2,3)
Number = c(5,8,9,2)
Grade = c("A")
Grade = c("A","(B)")
Grade = c("(A)","(B)","(C)","(F)")
Grade = c("Distinction (A)","Merit (B)","Pass(C)","Fail (F)")
myDF<-data.frame(Score = Grade,Numbers = Number)
myDF
hist(myDF)
help(barplot)
barplot(myDF)
barplot(myDF$Numbers)
barplot(myDF$Numbers, names, names.arg = myDF$Score)
cal<-[0,140,140,170,150,192,250]
cal<-c[0,140,140,170,150,192,250]
cal<-c(0,140,140,170,150,192,250)
summary(cal)
181-140
41*1.5
181+41
140-41
Pepsi & 150 & .50 \\
Coca-Cola & 140 & .50 \\
Dr. Pepper & 250 & .60 \\
Sprite & 192 & .55 \\
Mountain Dew & 170 & .56 \\
Mr. Pibb & 140 & .46 \\
Diet Pepsi & 0 & .50 \\
cost <-c(.5,.5,.6,.55,.56,.46,.5)
summary(cost)
cal
summary(cal)
140 - 1.5(181-140)
140-1.5*(181-140)
181-1.5*(181-140)
181+1.5*(181-140)
cal<- cal-c(1)
cal
cal<- cal+c(1)
cal
cal(1)
cal[1]
cal<- -cal[1]
cal
cal
cal<-c(0 ,140 ,140 ,170, 150, 192 ,250)
cal
cal<-cal[-c(0)]
cal
cal<-c(0 ,140 ,140 ,170, 150, 192 ,250)
cal[c(2,3,4,5,6)]
cal[c(2,3,4,5,6,7)]
cal[-c(1)]
cal<-cal[-c(1)]
summary(cal)
getwd()
setwd("C:/Users/nickg/Google Drive/RCodeST308")
install(jsonlite)
install.packages(jstonlite)
install.packages(jsonlite)
install.packages(jsonlitw)
install.packages(jsonlite)
installed.packages()
install.packages("jsonlite")
